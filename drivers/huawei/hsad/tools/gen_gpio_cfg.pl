#!/usr/bin/perl -w

use Spreadsheet::ParseExcel;
use Cwd;

#==========================================================================
#
#          GEN_GPIO_CFG
#
# brief description
# auto gen config.c and .h by perl script
# EXAMPLE
#   gen_gpio_cfg.pl
# Copyright (c) 2008 - 2010 by Huawei Incorporated.  All Rights Reserved.
#==========================================================================

sub my_main()
{
    my $current_dir = getcwd();
    opendir(CUR_DIR, $current_dir) || die "current directory not exist";
    my @file_s = readdir(CUR_DIR);
    my $count;
    my $gpio_config_xls;
    my $gpio_config_file;
    my $gpio_config_header;

    my $subdir;
    my $subdir_t;
    my @file_sub;
    foreach(@file_s){
        if(($_ =~ m/tools/)||($_ =~ m/auto-generate/)||($_ =~ m/\./)||($_ =~ m/\.\./))
        {
            next;
        }


        $subdir = "$current_dir/$_";
        $product = $_;
        opendir(SUB_DIR, $subdir) || next;
        @file_sub = readdir(SUB_DIR);
        foreach(@file_sub)
        {
            if($_ =~ m/gpio_mux\.xls$/)
            {

                $gpio_config_xls = $_;
                $gpio_config_file = $product."_".$gpio_config_xls;
                $gpio_config_file =~ s/\.xls$/\.c/;
                $gpio_config_header = $product."_".$gpio_config_xls;
                $gpio_config_header =~ s/\.xls$/\.h/;
                gpio_gen_config($subdir, $gpio_config_file,$gpio_config_xls,$gpio_config_header,$product);
            }
        }

        closedir(SUB_DIR);
    }
    closedir(CUR_DIR);
}

sub prepare_work_dir()
{
    my $work_dir = getcwd();
    return $work_dir;
}

sub gpio_gen_config()
{
#The input gpio confing excel filename
    my ($root_dir, $gpio_config_file, $gpio_filename,$gpio_config_header,$product_name) = @_;

#the path of hwgpio_xxxx.xls
    my $gpio_config_excel = "$root_dir/$gpio_filename";

#The target file name  such as hwgpio_c5600.h
    my $hw_gpio_handle;

#GPIO drive strength list
    my %strength_list;

#remove the old file
# print "remove the old config file begin \n";
# if(system("unlink $root_dir/$gpio_config_file"))
# {
# }
# print "remove the old config file end \n";

#Open the target file
    open($hw_gpio_handle, ">$root_dir/../auto-generate/$gpio_config_file") ||
        die("Failed to open file $gpio_config_file for write!");

    my $oExcel = new Spreadsheet::ParseExcel;
    my $oBook = $oExcel->Parse($gpio_config_excel);

#print message to the display window
#print "Now begin to process GPIO config file $gpio_config_excel...\n";

# select the sheet "GPIO Definition" page.
    my $oSheet = $oBook->{Worksheet}[1];

#Show the progress bar
#print "Now begin to config gpio!\n";

#Show the head of target file
#print $hw_gpio_handle "#ifndef GPIO_HUAWEI_H\n#define GPIO_HUAWEI_H\n\n#include \"gpiomux.h\"\n\n";
    print $hw_gpio_handle "\n\n/*********************************************************\n";
    print $hw_gpio_handle "CAUTION : This file is Auto Generated by Perl based on *.xls\n";
    print $hw_gpio_handle "\t\tso,don't modify this file manually!\n";
    print $hw_gpio_handle "*********************************************************/\n";
    print $hw_gpio_handle "\n#include <hsad/gpiomux.h>\n";
    print $hw_gpio_handle "#include <hsad/config_general_struct.h>\n\n";
#printf $hw_gpio_handle "\n#include \"%s\"\n\n",$gpio_config_header;

#print "hw_gpio_handle : $hw_gpio_handle, oSheet : $oSheet, product_name : $product_name\n";

#print "\n 1 Get the config of each gpio from the excel sheet for the init..\n";
    gen_gpio_config_for_init($gpio_config_excel, $hw_gpio_handle,$oSheet,$product_name);

#   print "\n 2 Get the config of each gpio from the excel sheet for the sleep..\n";
#gen_gpio_config_for_sleep($hw_gpio_handle,$oSheet,$product_name);

#print "\n 2 Get the macro of each gpio from the excel sheet..\n";
#######gen_gpio_config_for_macro($root_dir,$oSheet,$gpio_config_header);

#print "\n 3 Gen config struct for board..\n";
    gen_config_struct($hw_gpio_handle,$oSheet,$product_name,$gpio_config_file);

#print $hw_gpio_handle "\n#endif";

#Close the output file
    close($hw_gpio_handle);
}


sub gen_config_struct()
{
    my ($hw_gpio_handle,$Sheet,$product_name,$gpio_config_file) = @_;

    $gpio_config_file =~ s/\.c$//;
    print  $hw_gpio_handle "\n\n";
    print  $hw_gpio_handle "//gpio module boardid struct\n";
    printf $hw_gpio_handle "struct board_id_general_struct %s = {\n",$gpio_config_file;
    printf $hw_gpio_handle "\t.name=GPIO_MODULE_NAME,"."\n\t.board_id=BOARD_ID_%s,\n",uc($product_name);
    printf $hw_gpio_handle "\t.data_array={.gpio_ptr=%s_gpio_init_table},\n",$product_name;
    print  $hw_gpio_handle "\t.list={NULL,NULL},\n";
    print  $hw_gpio_handle "};"."\n\n";
}

sub gen_gpio_config_for_init()
{
#input parameters
    my ($gpio_config_excel, $hw_gpio_handle, $Sheet, $product_name) = @_;

    my $line_index = 1;
    my $mux_pin_name;
    my $strength;
    my $init_type;
    my $gpio_function;
    my $out_value;

    my $sleep_type;
    my $sleep_out_value;
    my $wake_up_en;
    my $gpio_num;
    my $gpio_name;

    printf $hw_gpio_handle "gpiomux_setting %s_gpio_init_table[] = {\n",$product_name;

#Get the config from the excel sheet for each
    while(1)
    {
#get the value from the excel for each
        $mux_pin_name              = $Sheet->{Cells}[$line_index][9]->Value;
        $gpio_num                  = $Sheet->{Cells}[$line_index][2]->Value;
        $gpio_function             = $Sheet->{Cells}[$line_index][3]->Value;
        $gpio_name		   = $Sheet->{Cells}[$line_index][4]->Value;
        $init_type                 = $Sheet->{Cells}[$line_index][5]->Value;
        $sleep_type		   = $Sheet->{Cells}[$line_index][6]->Value;
        $sleep_out_value	   = $Sheet->{Cells}[$line_index][7]->Value;
        $wake_up_en		   = $Sheet->{Cells}[$line_index][8]->Value;

#get init pull value
        my @tmp_type = split /-/, $init_type;
        my $pull = pop(@tmp_type);
        my $direction = pop(@tmp_type);

# check pull value
        if("$pull" ne "NPpdpu" && "$pull" ne "npPDpu" && "$pull" ne "nppdPU" && "$pull" ne "NONSET")
        {
            die("Error in $gpio_config_excel:$line_index: The value of $pull in the excel is different from the ti documents, you should be wrong!!!!\n");
        }

        my %pull_map =
            (
             "NPpdpu" => "GPIOMUX_NOPULL",
             "npPDpu" => "GPIOMUX_PULL_DOWN",
             "nppdPU" => "GPIOMUX_PULL_UP",
             "NONSET" => "GPIOMUX_NONSET"
            );

#Begin write configuration.
        print $hw_gpio_handle "    {";

# write GPIO name
        if("$gpio_name" ne "")
        {
            printf $hw_gpio_handle '%-18s', '"'.$gpio_name.'", ';
            $gpio_name =~ s/GPIO[0-9]*_/GPIO_/;
            printf $hw_gpio_handle '%-18s', '"'.$gpio_name.'", ';
        }
        else
        {
            printf $hw_gpio_handle '%-18s', '"", ';
            printf $hw_gpio_handle '%-18s', '"", ';
        }

#write GPIO number
        if("$gpio_num" ne "")
        {
            printf $hw_gpio_handle "%8s ",$gpio_num.",";
        }
        else
        {
            printf $hw_gpio_handle "GPIO_INVALID_NUM, ";
        }

        printf $hw_gpio_handle "%-16s ", $mux_pin_name.",";
        printf $hw_gpio_handle "%-12s ", $gpio_function.",";
        printf $hw_gpio_handle "%-22s ", $pull_map{$pull}.",";

#write pull type and pull up/down
        if("$pull" eq "NONSET")
        {
            print $hw_gpio_handle "GPIOMUX_NONSET, ";
        }
        else
        {
            if ("$direction" eq "DO")
            {
                print $hw_gpio_handle "GPIOMUX_OUT, ";
            }
            elsif("$direction" eq "DI")
            {
                print $hw_gpio_handle "GPIOMUX_IN, ";
            }
            else
            {
                die("Error in $gpio_config_excel:$line_index: Invalid direction config!");
            }
        }

#OK, config sleep type now.
#get sleep pull value
        my @tmp_stype = split /-/, $sleep_type;
        my $sleep_pull = pop(@tmp_stype);
        my $sleep_direction = pop(@tmp_stype);

# check pull value
        if("$sleep_pull" ne "NPpdpu" && "$sleep_pull" ne "npPDpu" && "$sleep_pull" ne "nppdPU" && "$sleep_pull" ne "NONSET" && "$sleep_pull" ne "DISABLE" )
        {
            die("ERROR in $gpio_config_excel:$line_index: the value of $mux_pin_name in the excel is different from the ti documents, you should be wrong!!!!\n");
        }

        my %sleep_pull_map =
            (
             "NPpdpu" => "GPIOMUX_NOPULL",
             "npPDpu" => "GPIOMUX_PULL_DOWN",
             "nppdPU" => "GPIOMUX_PULL_UP",
             "NONSET" => "GPIOMUX_NONSET",
             "DISABLE"=> "GPIOMUX_DISABLE"
            );

        if ("$sleep_pull" eq "NONSET" || "$sleep_pull" eq "DISABLE" )
        {
            printf $hw_gpio_handle "%-22s ", $sleep_pull_map{$sleep_pull}.",";
            print $hw_gpio_handle "MUX_OFF_IN, ";
            goto nonset;
        }
        else
        {
            printf $hw_gpio_handle "%-22s ", $sleep_pull_map{$sleep_pull}.",";
        }

#sleep configuration
        if ("$sleep_direction" eq "DO")
        {
            if("$sleep_out_value" eq "H")
            {
                print $hw_gpio_handle "MUX_OFF_OUTPTU, ";
            }
            elsif("$sleep_out_value" eq "L")
            {
                print $hw_gpio_handle "MUX_OFF_OUTPTD, ";
            }
            else
            {
                die("Error in $gpio_config_excel:$line_index: Please selcet the H/L value");
            }
        }
        elsif("$sleep_direction" eq "DI")
        {
            print $hw_gpio_handle "MUX_OFF_IN, ";
        }
        else
        {
            die("Error in $gpio_config_excel:$line_index: Please check your sleep direction configuration");
        }

nonset:
#write wakeup en value
        if("$wake_up_en" eq "Y")
        {
            print $hw_gpio_handle "WAKE_UP_ENABLE";
        }
        elsif("$wake_up_en" eq "N")
        {
            print $hw_gpio_handle "WAKE_UP_DISABLE";
        }
        else
        {
            die("Error in $gpio_config_excel:$line_index: Invalid wkup value!");
        }

        print $hw_gpio_handle "},";
        printf $hw_gpio_handle "  /* %s */\n", $mux_pin_name;

#process next line until there is no gpio config
        $line_index += 1;

#Test if we have read the end of excel file,
        if($line_index > $Sheet->{MaxRow})
        {
            print $hw_gpio_handle '    {"","",GPIO_INVALID_NUM, MUX_PIN_END, MUX_PIN_END, MUX_PIN_END, MUX_PIN_END, MUX_PIN_END, MUX_PIN_END, MUX_PIN_END},';
            last;
        }
    }

    print $hw_gpio_handle "\n};\n";
}

sub gen_gpio_config_for_macro()
{
#input parameters
    my ($root_dir,$Sheet,$header_file_name) = @_;

    my $line_index = 1;
    my $gpio_num;
    my $gpio_macro;
    my $hw_gpio_handle;
    my $mux_mode;

#Open the target file
    open($hw_gpio_handle, ">$root_dir/$header_file_name") ||
        die("Failed to open file $header_file_name for write!");

    my $product_name;

    my @tmp_name = split /_/, $header_file_name;
    $product_name = pop(@tmp_name);
    $product_name = pop(@tmp_name);
    $product_name = pop(@tmp_name);
    $product_name = uc($product_name);
    print $hw_gpio_handle "#ifndef GPIO_$product_name"."_H\n#define GPIO_$product_name"."_H\n\n";
    print $hw_gpio_handle "/*define GPIO_$product_name"."_MACRO*/\n";

    while(1)
    {
#get the value from the excel for each
        $gpio_num               = $Sheet->{Cells}[$line_index][3]->Value;
        $gpio_macro             = $Sheet->{Cells}[$line_index][2]->Value;
        $mux_mode		= $Sheet->{Cells}[$line_index][1]->Value;

        if ("$mux_mode" eq "GPIOMUX_M3" && "$gpio_macro" ne "")
        {
            printf $hw_gpio_handle "#define    ";
            printf $hw_gpio_handle "    %-30s", $gpio_macro;
            printf $hw_gpio_handle "\"$gpio_macro\"\n";

        }

#process next line until there is no gpio config
        $line_index += 1;

#Test if we have read the end of excel file,
        if($line_index > $Sheet->{MaxRow})
        {
            last;
        }
    }

    print $hw_gpio_handle "\n";

    print $hw_gpio_handle "\n#endif";

#Close the output file
    close($hw_gpio_handle);

}

#this is the main function and the beginning
&my_main();
