#!/usr/bin/perl -w
#==========================================================================
#
#          power
#
# brief description
# auto gen config.c and .h by perl script
# EXAMPLE
# parse_power_tree.pl
# Copyright (c) 2008 - 2010 by Huawei Incorporated.  All Rights Reserved.
# Author: r00186667 w00177577
#==========================================================================
# 此脚本使用前提:
# 1.excel 要按Chip_pin进行排序
# 2.中间不要出现空行
#
#
# history

use strict;
use Spreadsheet::ParseExcel;
use Cwd;

sub main()
{
	my $current_dir = getcwd();
    opendir(CUR_DIR, $current_dir) || die "current directory not exist";
    my @file_s = readdir(CUR_DIR);
    my $count;
    my $power_config_xls;
    my $power_config_file;
    my $power_config_header;
	my $subdir;

	my $product;

	my @file_sub;

	foreach(@file_s){
		#ignore tools/auto-generate/./.. dir
		if(($_ =~ m/tools/)||($_ =~ m/auto-generate/)||($_ =~ m/\./)||($_ =~ m/\.\./))
		{
			next;
		}
		$subdir = "$current_dir/$_";
		$product = $_;
		opendir(SUB_DIR, $subdir) || next;
		@file_sub = readdir(SUB_DIR);
		foreach(@file_sub)
		{
			if($_ =~ m/power_tree\.xls$/)
			{
					$power_config_xls=$_;

					$power_config_file =$product."_".$power_config_xls;
					$power_config_header =$product."_".$power_config_xls;
					$power_config_file =~ s/\.xls$/\.h/;
					$power_config_header=~ s/\.xls$/\.h/;

					parse_excel($subdir,$power_config_xls,$power_config_header,$power_config_file,$product);

			}

		}
		closedir(SUB_DIR);
	}

	closedir(CUR_DIR);
}

sub parse_excel()
{
	my ($current_dir, $power_config_xls, $power_config_header,$power_config_file,$product_name) = @_;

	my  $power_config_file_handle;
	my  $power_config_header_handle;



	open $power_config_file_handle, ">$current_dir/../auto-generate/$power_config_file" || die "can't open $power_config_file";
	#open $power_config_header_handle, ">$power_config_header" || die "can't open $power_config_header";


	my $oExcel = new Spreadsheet::ParseExcel;
    my $oBook = $oExcel->Parse("$current_dir/$power_config_xls");

	my $oSheet = $oBook->{Worksheet}[1];

	generic_power_config_for_c($power_config_file_handle,$oSheet,$product_name,$power_config_file);
	#generic_power_config_for_h($power_config_header, $power_config_header_handle,$oSheet,$product_name);

	close $power_config_file_handle;
	#close $power_config_header_handle;

}

sub generic_power_config_for_c()
{
	my ($power_config_file_handle, $oSheet, $product_name,$power_config_file) = @_;

	#解析excel时的索引
	my $index = 1;
	my $i = 0;
	my $count = 1;
	my $tmp_index =1;

	my $provider;
	my $chip_pin;
	my $power_net;
	my $power_type;
	my $min_uv;
	my $max_uv;
	my $apply_uv;
	my $modes;
	my $ops;
	my $enable_mem;
	my $always_on;
	my $voltage;
	my $consumer;
	my $consumer_power_net;

	#存17个字段的 hash表
	my %hash=();

	my %hash_volagetable=();

	#my $power_config_header = $power_config_file;
	#$power_config_header=~ s/\.c$/\.h/;

	print $power_config_file_handle "\n/*********************************************************\n";
	print $power_config_file_handle "CAUTION : This file is Auto Generated by Perl based on *.xls\n";
	print $power_config_file_handle "		so,don't modify this file manually!\n";
	print $power_config_file_handle "*********************************************************/\n\n\n";

	my $file_macro = $power_config_file;
	$file_macro =~ s/\.h/_H/;
	$file_macro =~ tr/a-z/A-Z/;

	my $power_config_file_no_ext = $power_config_file;
	$power_config_file_no_ext =~ s/\.h//;

	#select $power_config_header_handle
	print $power_config_file_handle "#ifndef ", $file_macro, "\n";
	print $power_config_file_handle "#define ", $file_macro, "\n\n";

	print $power_config_file_handle "#include <linux/i2c/twl.h>\n";
	print $power_config_file_handle "#include <linux/i2c.h>\n";
	print $power_config_file_handle "#include <linux/regulator/machine.h>\n\n";
	print $power_config_file_handle "#include <plat/config_twl6030_default.h>\n";
	print $power_config_file_handle "#include <hsad/config_general_struct.h>\n";
	print $power_config_file_handle "#include <hsad/plat_power_mux.h>\n";

	#print $power_config_file_handle "#include \"$power_config_header\"\n\n\n";

	while(1)
	{

		$chip_pin = $oSheet->{Cells}[$index][1]->Value;

		if($chip_pin eq "" ||($index > $oSheet->{MaxRow}))
		{
			last;
		}
		$provider = $oSheet->{Cells}[$index][0]->Value;
		$power_type = $oSheet->{Cells}[$index][3]->Value;
		$min_uv = $oSheet->{Cells}[$index][4]->Value;
		$max_uv = $oSheet->{Cells}[$index][5]->Value;
		$apply_uv = $oSheet->{Cells}[$index][6]->Value;
		$modes = $oSheet->{Cells}[$index][7]->Value;
		$ops = $oSheet->{Cells}[$index][8]->Value;
		$enable_mem = $oSheet->{Cells}[$index][9]->Value;
		$always_on = $oSheet->{Cells}[$index][10]->Value;
		$voltage = $oSheet->{Cells}[$index][11]->Value;
		$consumer = $oSheet->{Cells}[$index][12]->Value;
		$consumer_power_net = $oSheet->{Cells}[$index][13]->Value;
		$tmp_index = $index + 1;
		while($chip_pin eq $oSheet->{Cells}[$tmp_index][1]->Value)
		{
			$count ++;
			$tmp_index++;
		}
		$hash{lc($chip_pin)}="&".lc($product_name)."_".lc($provider)."_".lc($chip_pin);

		$provider =~ tr/A-Z/a-z/;
		$product_name =~ tr/A-Z/a-z/;
		$chip_pin =~ tr/A-Z/a-z/;
		print $power_config_file_handle "\nstatic struct regulator_consumer_supply ",$product_name,"_",$provider,"_",$chip_pin,"_supply[] = {\n";
		for($i=0;$i<$count;$i++)
		{
			my $consumer_tmp = $oSheet->{Cells}[$index+$i][12]->Value;
			my $consumer_power_net_tmp = $oSheet->{Cells}[$index+$i][13]->Value;
			my $dev_name = $oSheet->{Cells}[$index+$i][14]->{Val};

			if($consumer_tmp ne "" && $consumer_power_net_tmp ne "")
			{
				my $voltage_temp = $voltage;
				$voltage_temp =~ s/V/./;
				my $i=0;
				$i=$voltage_temp;
				$i=$i * 1000000;
				$hash_volagetable{uc("\"").uc($consumer_tmp).uc("_").uc($consumer_power_net_tmp).uc("\"")} = $i;
			}

			#$consumer_tmp =~ tr/A-Z/a-z/;
			#$consumer_power_net_tmp =~ tr/A-Z/a-z/;
			if($consumer_tmp eq "")
			{
				if($consumer_power_net_tmp eq "")
				{
					print $power_config_file_handle "\n";
				}
				else
				{
					print $power_config_file_handle "	{\n";
					print $power_config_file_handle "		.supply = ","\"",$consumer_power_net_tmp,"\"",",\n";
					if($dev_name ne "")
					{
						print $power_config_file_handle "		.dev_name = ","\"",$dev_name,"\"",",\n";
					}
					print $power_config_file_handle "	},\n";
				}
			}
			else
			{
				print $power_config_file_handle "	{\n";
				print $power_config_file_handle "		.supply = ","\"",$consumer_tmp,"_",$consumer_power_net_tmp,"\"",",\n";
				print $power_config_file_handle "	},\n";
			}
			#ranyan print $power_config_file_handle "	}\n";
		}
		print $power_config_file_handle "};\n";


		print $power_config_file_handle "static struct regulator_init_data ",$product_name,"_",$provider,"_",$chip_pin," = {\n";
		print $power_config_file_handle "	.constraints = { \n";
		print $power_config_file_handle "		.min_uV =",$min_uv,",\n";
		print $power_config_file_handle "		.max_uV =",$max_uv,",\n";
		print $power_config_file_handle "		.apply_uV =",$apply_uv,",\n";
		print $power_config_file_handle "		.always_on =",$always_on,",\n";
		print $power_config_file_handle "		.valid_modes_mask =",$modes,",\n";
		print $power_config_file_handle "		.valid_ops_mask =",$ops,",\n";
		print $power_config_file_handle "		.state_mem = { \n";

		if($enable_mem eq "true"){
			print $power_config_file_handle	"			.enabled = true,\n";
			print $power_config_file_handle	"			.disabled = false,\n";
		}
		else
		{
			print $power_config_file_handle	"			.enabled = false,\n";
			print $power_config_file_handle	"			.disabled = true,\n";
		}
		print $power_config_file_handle "		},\n";
		print $power_config_file_handle  "	}, \n";


		print $power_config_file_handle "	.num_consumer_supplies = ARRAY_SIZE(",$product_name,"_",$provider,"_",$chip_pin,"_supply),\n";
		print $power_config_file_handle "	.consumer_supplies = ",$product_name,"_",$provider,"_",$chip_pin,"_supply,\n";
		print $power_config_file_handle "};\n";


		$index =$tmp_index;
		$count = 1;
	}


	#取第一行第一列的 为下面所有的provider
	$provider = $oSheet->{Cells}[1][0]->Value;
	$provider =~ tr/A-Z/a-z/;
	print $power_config_file_handle "\n\nstatic struct twl4030_platform_data ",$product_name,"_",$provider,"_twldata = {\n";
	print $power_config_file_handle "	.irq_base	= TWL6030_IRQ_BASE,\n";
	print $power_config_file_handle "	.irq_end	= TWL6030_IRQ_END,\n\n\n";

	print $power_config_file_handle "	.usb		= &omap4_usbphy_data,\n";
	print $power_config_file_handle "	.clk32kg        = &twl6030_clk32kg,\n";
	print $power_config_file_handle "	.madc           = &twl6030_madc,\n";
	print $power_config_file_handle "	.bci            = &twl6030_bci_data,\n";
	print $power_config_file_handle "	.codec          = &twl6040_codec,\n\n\n";
	for (keys %hash)
	{
		print $power_config_file_handle "	.$_		= ",$hash{$_},",\n";
	}

	print $power_config_file_handle "};\n";

	print $power_config_file_handle "\n\nstatic struct i2c_board_info ",$product_name,"_",$provider,"_i2c_boardinfo[] = {\n";
	print $power_config_file_handle "	{\n";
	print $power_config_file_handle "		I2C_BOARD_INFO(\"",$provider,"\", 0x48),\n";
	print $power_config_file_handle "		.flags = I2C_CLIENT_WAKE,\n";
	print $power_config_file_handle "		.irq = OMAP44XX_IRQ_SYS_1N,\n";
	print $power_config_file_handle "		.platform_data = &",$product_name,"_",$provider,"_twldata,\n";
	print $power_config_file_handle "	},\n";
	print $power_config_file_handle "};\n";

	print $power_config_file_handle "\n\nstatic struct power_voltage_table ",$product_name,"_","config_powervalue[] ={\n";
	for (keys %hash_volagetable)
	{
		print $power_config_file_handle "	{$_	,",$hash_volagetable{$_},"},\n";
	}
	print $power_config_file_handle "    {\"\" , 0},\n";
	print $power_config_file_handle "};\n";

	print $power_config_file_handle "\n\nstatic power_tree_config ",$product_name,"_","config_powertree[] ={\n";
	print $power_config_file_handle "	{",$product_name,"_",$provider,"_i2c_boardinfo,", " ",$product_name,"_","config_powervalue},\n";
	print $power_config_file_handle "};\n";

	print $power_config_file_handle "\n\nstruct board_id_general_struct $power_config_file_no_ext ={\n";
	#print $power_config_file_handle "{\n";
	print $power_config_file_handle "		.name=POWER_TREE_MODULE_NAME,\n";
	print $power_config_file_handle "		.board_id=BOARD_ID_",uc($product_name),",\n";
	print $power_config_file_handle "		.data_array={.config_powerconf_ptr=",$product_name,"_","config_powertree},\n";
	print $power_config_file_handle "		.list={NULL,NULL},\n";
	print $power_config_file_handle "};\n";

	print $power_config_file_handle "\n\#endif";
}

sub generic_power_config_for_h()
{
	my ($power_config_header, $power_config_header_handle, $oSheet, $product_name) = @_;
    my $line_index = 1;
    my $consumer;
    my $consumer_power_net;
    my $power_type;
    my $chip_pin;
    my $power_net;
   	my $voltage;
    my $comment;
    my $file_macro = $power_config_header;
    $file_macro =~ s/\.h/_H/;
    $file_macro =~ tr/a-z/A-Z/;
    $comment = $file_macro;
    $comment =~ s/_H$/_MACRO/;

    #select $power_config_header_handle
    print $power_config_header_handle "#ifndef ", $file_macro, "\n";
    print $power_config_header_handle "#define ", $file_macro, "\n\n";
    printf $power_config_header_handle "/*define %s */\n", $comment;

    while(1)
    {
        $voltage = $oSheet->{Cells}[$line_index][11]->Value;
        $consumer = $oSheet->{Cells}[$line_index][12]->Value;
        $consumer_power_net = $oSheet->{Cells}[$line_index][13]->Value;
        $power_type = $oSheet->{Cells}[$line_index][3]->Value;
        $power_net = $oSheet->{Cells}[$line_index][2]->Value;
        $chip_pin = $oSheet->{Cells}[$line_index][1]->Value;

        if($power_net eq "" || $line_index > $oSheet->{MaxRow})
        {
            last;
        }

        if($consumer ne "" && $consumer_power_net ne "")
        {
            my $macro_name = sprintf("VIVA_%s_%s", $consumer, $consumer_power_net);
            my $macro_value = sprintf("\"%s_%s_%s_%s\"", $power_type, $chip_pin, $consumer, $voltage);
            printf $power_config_header_handle "#define %s\t\t%s\n", $macro_name, $macro_value;
        }
        $line_index += 1;
    }
    print $power_config_header_handle "\n\#endif";

}

#start here
&main();
